<?php

/**
 * @file
 *  h5peditor.module php file
 *  Drupal module h5peditor. A HTML5 Package editor for Drupal.
 */


/**
 * Implements hook_menu().
 */
function h5peditor_menu() {
  $items = array();

  $items['h5peditor/%/%/libraries'] = array(
    'title' => 'H5peditor Libraries',
    'page callback' => 'h5peditor_libraries_callback',
    'access callback' => 'h5peditor_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['h5peditor/%/%/content-type-cache'] = array(
    'title' => 'H5Peditor Content type cache',
    'page callback' => 'h5peditor_content_type_cache_callback',
    'access callback' => 'h5peditor_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  $items['h5peditor/%/%/library-install'] = array(
    'title' => 'H5P Install Library',
    'page callback' => 'h5peditor_library_install_callback',
    'page arguments' => array(1),
    'access callback' => 'h5peditor_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  $items['h5peditor/%/%/library-upload'] = array(
    'title' => 'H5P Upload library',
    'page callback' => 'h5peditor_library_upload_callback',
    'page arguments' => array(1),
    'access callback' => 'h5peditor_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  $items['h5peditor/%/%/libraries/%/%/%'] = array(
    'title' => 'H5peditor Library',
    'page callback' => 'h5peditor_library_callback',
    'page arguments' => array(4, 5, 6),
    'access callback' => 'h5peditor_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['h5peditor/%/%/files'] = array(
    'title' => 'H5peditor Files',
    'page callback' => 'h5peditor_files_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'h5peditor_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function h5peditor_permission() {
  return array(
    'install recommended h5p libraries' => array(
      'title' => t('Install recommended H5P Libraries'),
      'description' => t('Install only recommended content types available at the Hub.'),
    )
  );
}

/**
 * Checks if the current user should have access to the editor.
 *
 * @param int $node_id
 * @return bool
 */
function h5peditor_access($node_id) {
  // Start by check if the user has access to create H5P content
  $access = node_access('create', 'h5p_content');

  if (!$access && $node_id !== '0') {
    // No access to create, check if the user has access to edit instead
    $node = node_load($node_id);
    $access = node_access('update', $node);
  }

  return $access;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function h5peditor_form_h5p_content_node_form_alter(&$form, &$form_state) {
  $node = h5peditor_get_source_node($form['#node']);
  $library = isset($node->main_library) ? H5PCore::libraryToString($node->main_library) : (isset($node->h5p_library) ? $node->h5p_library : 0);

  if (variable_get('h5p_first_runnable_saved', 0) === 0) {
    drupal_set_message(t("If you don't have any H5P content types installed you may <a href=\"http://h5p.org/update-all-content-types\" target=\"_blank\">download them all at once</a> from H5P.org and upload them all at once on the <a href=\"!library_admin_url\" target=\"_blank\">library admin page</a>. Refresh this page when you've installed the libraries.", array('!library_admin_url' => url('admin/content/h5p'))));
  }

  $form['h5p_type'] = array(
    '#type' => 'radios',
    '#title' => t('HTML5 Content'),
    '#options' => array(
      'upload' => t('Upload'),
      'create' => isset($node->nid) ? t('Edit') : t('Create'),
    ),
    '#default_value' => $library ? 'create' : (variable_get('h5p_first_runnable_saved', 0) ? 'create' : 'upload'),
    '#weight' => $form['h5p']['#weight'] - 1,
  );

  $form['h5p_editor'] = array(
    '#type' => 'item',
    '#title' => t('Content type'),
    '#markup' => '<div class="h5p-editor">' . t('Waiting for javascript...') . '</div>',
    '#weight' => $form['h5p']['#weight'],
  );
  $form['#after_build'][] = 'h5peditor_h5p_content_node_form_after_build';

  $form['h5p_library'] = array(
    '#type' => 'hidden',
    '#default_value' => $library,
  );

  $form['#submit'][] = 'h5peditor_h5p_content_node_form_submit';
  for ($i = 0, $s = count($form['#validate']); $i < $s; $i++) {
    if ($form['#validate'][$i] == 'h5p_form_validate') {
      $form['#validate'][$i] = 'h5peditor_h5p_content_node_form_validate';
    }
  }
}

/**
 * Add scripts and styles to the h5p node form.
 */
function h5peditor_h5p_content_node_form_after_build($form) {
  global $language;
  static $done;
  if ($done === TRUE) {
    // Make sure we only add the js once.
    return $form;
  }
  $done = TRUE;

  $node = h5peditor_get_source_node($form['#node']);
  $assets = h5p_add_core_assets();
  h5p_add_files_and_settings(TRUE, TRUE); // Force integration

  $h5peditor_module_path = drupal_get_path('module', 'h5peditor');
  $cache_buster = '?' . variable_get('css_js_query_string', '');

  // Add our own styles
  foreach (H5peditor::$styles as $style) {
    $assets['css'][] = base_path() . $h5peditor_module_path . '/h5peditor/' . $style . $cache_buster;
  }

  // Add our own scripts
  foreach (H5peditor::$scripts as $script) {
    // We do not want the creator of the iframe inside the iframe
    if ($script !== 'scripts/h5peditor-editor.js') {
      $assets['js'][] = base_path() . $h5peditor_module_path . '/h5peditor/' . $script . $cache_buster;
    }
  }
  drupal_add_js($h5peditor_module_path . '/h5peditor/scripts/h5p-hub-client.js');
  drupal_add_js($h5peditor_module_path . '/h5peditor/scripts/h5peditor-editor.js');
  drupal_add_js($h5peditor_module_path . '/scripts/application.js');

  // Add translation
  $language_file = $h5peditor_module_path . '/h5peditor/language/' . $language->language . '.js';
  if (!file_exists($language_file)) {
    $language_file = $h5peditor_module_path . '/h5peditor/language/en.js';
  }
  drupal_add_js($language_file);

  // TODO: If we're going to preprocess the assets one day, remember to skip ckeditor.

  $content_validator = _h5p_get_instance('contentvalidator');
  $file_path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
  $content_id = h5p_get_content_id($node);
  $settings = array(
    'h5peditor' => array(
      'filesPath' => base_path() . $file_path . '/h5peditor',
      'fileIcon' => array(
        'path' => base_path() . $h5peditor_module_path . '/h5peditor/images/binary-file.png',
        'width' => 50,
        'height' => 50,
      ),
      'ajaxPath' => url('h5peditor/' . H5PCore::createToken('editorajax') . '/' . ($content_id ? $content_id : 0) . '/'),
      'modulePath' => $h5peditor_module_path,
      'libraryPath' => _h5p_get_h5p_path() . '/libraries/',
      'copyrightSemantics' => $content_validator->getCopyrightSemantics(),
      'assets' => $assets,
      'contentRelUrl' => '../h5p/content/',
      'editorRelUrl' => '../../../h5peditor/'
    ),
  );

  if (isset($node->json_content)) {
    $settings['h5peditor']['nodeVersionId'] = $content_id;
  }

  drupal_add_js($settings, array('type' => 'setting', 'scope' => JS_DEFAULT));

  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function h5peditor_h5p_content_node_form_validate($form, $form_state) {
  if ($form_state['values']['h5p_type'] == 'upload') {
    h5p_form_validate($form, $form_state);
    return;
  }
  else {
    $library_data = H5PCore::libraryFromString($form_state['values']['h5p_library']);
    if ($library_data === FALSE) {
      form_set_error('h5p_editor', t('You must choose an H5P content type or upload an H5P file.'));
    }
    else {
      $is_runnable = db_query(
        "SELECT runnable
        FROM {h5p_libraries}
        WHERE machine_name = :machine_name
        AND major_version = :major_version
        AND minor_version = :minor_version", array(
          ':machine_name' => $library_data['machineName'],
          ':major_version' => $library_data['majorVersion'],
          ':minor_version' => $library_data['minorVersion'],
        ))->fetchField();
      if (!$is_runnable) {
        form_set_error('h5p_editor', t('Invalid H5P content type'));
      }
    }
  }
}

/**
 * Node form submit handler.
 */
function h5peditor_h5p_content_node_form_submit($form, &$form_state) {
  if ($form_state['values']['h5p_type'] == 'upload') {
    return;
  }

  if (isset($form['#node']->main_library)) {
    $form_state['values']['h5p_library_old'] = $form['#node']->main_library;
    $form_state['values']['h5p_params_old'] = $form['#node']->json_content;
  }
  $form_state['values']['main_library_id'] = h5peditor_get_library_property($form_state['values']['h5p_library'], 'libraryId');
}

/**
 * Implements hook_node_insert().
 */
function h5peditor_node_insert($node) {
  _h5peditor_create_content($node);
}

/**
 * Implements hook_node_update().
 */
function h5peditor_node_update($node) {
  _h5peditor_create_content($node);
}

/**
 * Create or update H5P content.
 */
function _h5peditor_create_content($node) {
  if (!isset($node->h5p_type) || $node->h5p_type == 'upload') {
    return;
  }
  $editor = h5peditor_get_instance();
  $content_id = h5p_get_content_id($node);

  if (isset($node->translation_source) || isset($node->clone_from_original_nid)) {
    $storage = _h5p_get_instance('storage');
    $source_node = h5peditor_get_source_node($node);
    $storage->copyPackage(h5p_get_content_id($node), h5p_get_content_id($source_node), $node->nid);
  }

  // Move files.
  $editor->processParameters(h5p_get_content_id($node), h5peditor_get_library_property($node->h5p_library), json_decode($node->json_content), isset($node->h5p_library_old) ? $node->h5p_library_old : NULL, isset($node->h5p_params_old) ? json_decode($node->h5p_params_old) : NULL);
}

/**
 * Callback that lists all h5p libraries.
 */
function h5peditor_libraries_callback() {
  $editor = h5peditor_get_instance();

  drupal_add_http_header('Cache-Control', 'no-cache');
  drupal_add_http_header('Content-type', 'application/json');
  print $editor->getLibraries();
}

/**
 * Upload library from endpoint
 */
function h5peditor_library_upload_callback($token) {

  // Only handle POST requests
  if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    drupal_not_found();
    return;
  }

  // Verify token
  if (!\H5PCore::validToken('editorajax', $token)) {
    \H5PCore::ajaxError(t('Invalid security token.'), 'INVALID_TOKEN');
    return;
  }

  // New uploads need to be saved in temp to extract the relevant information.
  $core = _h5p_get_instance('core');
  $field_name = 'h5p';
  $temporary_file_path = 'public://' . variable_get('h5p_default_path', 'h5p')
                         . '/temp/' . uniqid('h5p-');
  file_prepare_directory($temporary_file_path, FILE_CREATE_DIRECTORY);
  $file = move_uploaded_file($_FILES[$field_name]['tmp_name'],
    $temporary_file_path . '/' . $_FILES[$field_name]['name']);

  if (!$file) {
    H5PCore::ajaxError(t('Could not get posted H5P.'), 'NO_CONTENT_TYPE');
    return;
  }

  // These has to be set instead of sending parameteres to the validation function.
  $_SESSION['h5p_upload'] = drupal_realpath($temporary_file_path . '/'. $_FILES[$field_name]['name']);
  $_SESSION['h5p_upload_folder'] = drupal_realpath($temporary_file_path);

  $validator = _h5p_get_instance('validator');
  if (!$validator->isValidPackage()) {
    file_unmanaged_delete($_SESSION['h5p_upload']);

    // Maintain session variables.
    unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);

    H5PCore::ajaxError(t('The file you uploaded is not a valid HTML5 Package.'), 'VALIDATION_FAILED');
    return;
  }

  // Install any required dependencies
  $storage = _h5p_get_instance('storage');
  $storage->savePackage(NULL, NULL, TRUE);

  // Clean up
  file_unmanaged_delete($_SESSION['h5p_upload']);

  // Successfully loaded content json of file into editor
  $content_path = $core->h5pF->getUploadedH5pFolderPath() . DIRECTORY_SEPARATOR . 'content';
  $json = file_get_contents($content_path . DIRECTORY_SEPARATOR . 'content.json');
  H5PCore::ajaxSuccess($json);
}

/**
 * Install library from external file
 */
function h5peditor_library_install_callback($token) {

  // Only handle POST requests
  if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    drupal_not_found();
    return;
  }

  // Verify token
  if (!\H5PCore::validToken('editorajax', $token)) {
    \H5PCore::ajaxError(t('Invalid security token.'), 'INVALID_TOKEN');
    return;
  }

  // Determine which content type to install from post data
  $name = filter_input(INPUT_GET, 'id');
  if (!$name) {
    H5PCore::ajaxError(t('No content type was specified.'), 'NO_CONTENT_TYPE');
    return;
  }

  // Look up content type to ensure it's valid(and to check permissions)
  $content_type = db_query(
      "SELECT id, is_recommended
         FROM {h5p_libraries_hub_cache}
        WHERE machine_name = :name",
      array(':name' => $name)
  )->fetchObject();
  if (!$content_type) {
    H5PCore::ajaxError(t('The chosen content type is invalid.'), 'INVALID_CONTENT_TYPE');
    return;
  }

  // Check if the user has access to install or update content types
  $can_install_all = user_access('update h5p libraries');
  $can_install_recommended = ($content_type->is_recommended && user_access('install recommended h5p libraries'));
  if (!$can_install_all && !$can_install_recommended) {
    H5PCore::ajaxError(t('No permission to install content type.'), 'INSTALL_DENIED');
    return;
  }

  if (!$can_install_all && $can_install_recommended) {
    // Override core permission check
    $core = _h5p_get_instance('core');
    $core->mayUpdateLibraries(TRUE);
  }

  $protocol = (extension_loaded('openssl') ? 'https' : 'http');
  $endpoint = H5PCore::$hubEndpoints[H5PCore::CONTENT_TYPES];
  $h5p_data = file_get_contents("{$protocol}://{$endpoint}{$name}");

  if (!$h5p_data) {
    H5PCore::ajaxError(t('Failed to download the requested H5P.'), 'DOWNLOAD_FAILED');
    return;
  }

  $temporary_file_path = 'public://' . variable_get('h5p_default_path', 'h5p') . '/temp/' . uniqid('h5p-');
  file_prepare_directory($temporary_file_path, FILE_CREATE_DIRECTORY);
  $file = file_unmanaged_save_data($h5p_data, $temporary_file_path . '/libraries.h5p');

  if (!$file) {
    H5PCore::ajaxError(t('Failed to download the requested H5P.'), 'DOWNLOAD_FAILED');
    return;
  }

  // These has to be set instead of sending parameters to the validation function.
  $_SESSION['h5p_upload']        = drupal_realpath($file);
  $_SESSION['h5p_upload_folder'] = drupal_realpath($temporary_file_path);

  $validator = _h5p_get_instance('validator');
  if (!$validator->isValidPackage(TRUE, FALSE)) {
    file_unmanaged_delete($_SESSION['h5p_upload']);

    // Maintain session variables.
    unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);

    $errors = drupal_get_messages('error');
    if (empty($errors)) {
      $errors = t('Validating h5p package failed.');
    }
    H5PCore::ajaxError($errors, 'VALIDATION_FAILED');
    return;
  }

  // Save H5P
  $storage = _h5p_get_instance('storage');
  $storage->savePackage(NULL, NULL, TRUE);

  // Successfully installed.
  H5PCore::ajaxSuccess();
}

/**
 * Callback that returns the content type cache
 */
function h5peditor_content_type_cache_callback() {

  drupal_add_http_header('Cache-Control', 'no-cache');
  drupal_add_http_header('Content-type', 'application/json');

  $core = _h5p_get_instance('core');
  if (!$core->h5pF->getOption('hub_is_enabled', TRUE)) {

    drupal_add_http_header('Status', 403);
    $core::ajaxError(
      $core->h5pF->t('The hub is disabled. You can enable it in the H5P settings.'),
      'HUB_DISABLED'
    );
    return;
  }

  // Update content type cache if enabled and too old
  $ct_cache_last_update = $core->h5pF->getOption('content_type_cache_updated_at', 0);
  $outdated_cache       = $ct_cache_last_update + (60 * 60 * 24 * 7); // 1 week
  if (time() > $outdated_cache) {
    $success = $core->updateContentTypeCache();
    if (!$success) {
      drupal_add_http_header('Status', 404);
      $core::ajaxError(
        $core->h5pF->t('Could not connect to the H5P Content Type Hub. Please try again later.'),
        'NO_RESPONSE'
      );
      return;
    }
  }

  $max_major_version = "
    SELECT hl.machine_name, max(hl.major_version) AS major_version
    FROM {h5p_libraries} hl
    WHERE hl.runnable = 1
    GROUP BY hl.machine_name
    ";

  $max_minor_version = "
    SELECT hl2.machine_name, hl2.major_version, max(hl2.minor_version) AS minor_version
    FROM ({$max_major_version}) hl1
    JOIN {h5p_libraries} hl2
    ON hl1.machine_name = hl2.machine_name
    AND hl1.major_version = hl2.major_version
    GROUP BY hl2.machine_name
  ";

  $local_libraries = db_query("
    SELECT hl4.library_id as id, hl4.machine_name, hl4.major_version, hl4.minor_version, hl4.patch_version
    FROM {h5p_libraries} hl4
    JOIN ({$max_minor_version}) hl3
    ON hl4.machine_name = hl3.machine_name
    AND hl4.major_version = hl3.major_version
    AND hl4.minor_version = hl3.minor_version
    GROUP BY hl4.machine_name
  ")->fetchAll();

  $cached_libraries = db_query("SELECT * FROM {h5p_libraries_hub_cache}")
    ->fetchAll();

  // Determine access
  $can_install_all         = user_access('update h5p libraries');
  $can_install_recommended = user_access('install recommended h5p libraries');


  // Add content type cache
  $libraries = array();
  foreach ($cached_libraries as &$result) {
    if ($can_install_all) {
      $result->restricted = FALSE;
    }
    elseif ($result->is_recommended && $can_install_recommended) {
      $result->restricted = FALSE;
    }
    else {
      $result->restricted = TRUE;
    }

    $libraries[] = $core->getCachedLibsMap($result);
  }
  $core->mergeLocalLibsIntoCachedLibs($local_libraries, $libraries);

  drupal_add_http_header('Status', 200);
  print json_encode(array(
    'libraries' => $libraries
  ));
}

/**
 * Callback that returns all library data
 *
 * @param string $library
 */
function h5peditor_library_callback($machine_name, $major_version, $minor_version) {
  global $language;

  drupal_add_http_header('Cache-Control', 'no-cache');
  drupal_add_http_header('Content-type', 'application/json');

  $editor = h5peditor_get_instance();
  print $editor->getLibraryData($machine_name, $major_version, $minor_version, $language->language, _h5p_get_h5p_path());

  // Log library loaded
  new H5PEvent('library', NULL, NULL, NULL,
    $machine_name,
    $major_version . '.' . $minor_version
  );
}

/**
 * Callback for file uploads.
 */
function h5peditor_files_callback($token, $content_id) {
  global $user;

  if (!H5PCore::validToken('editorajax', $token)) {
    return H5PCore::ajaxError(t('Invalid security token. Please reload the editor.'));
  }

  $file = new H5peditorFile(_h5p_get_instance('interface'));
  if (!$file->isLoaded()) {
    H5PCore::ajaxError(t('File not found on server. Check file upload settings.'));
    return;
  }

  // Make sure file is valid
  if ($file->validate()) {
    $core = _h5p_get_instance('core');
    // Save the valid file
    $core->fs->saveFile($file, $content_id);

    // Keep track of temporary files so they can be cleaned up later.
    $file_managed = (object) array(
      'uid' => $user->uid,
      'filename' => $file->getName(),
      'uri' => 'public://' . (empty($content_id) ?  'h5peditor/' : variable_get('h5p_default_path', 'h5p') . '/content/' . $content_id . '/') . $file->getType() . 's/' . $file->getName(),
      'filemime' => $file->type,
      'filesize' => $file->size,
      'status' => 0,
      'timestamp' => REQUEST_TIME,
    );
    file_save($file_managed);
  }

  $file->printResult();
}

/**
 * Keeps track of our editor instance, saving valuable resources.
 *
 * @staticvar H5peditor $instance
 * @return \H5peditor
 */
function h5peditor_get_instance() {
  static $instance;

  if (!$instance) {
    if (variable_get('h5p_library_development', 0) === 1) {
      $development = _h5p_get_instance('development');
    }
    $instance = new H5peditor(
      _h5p_get_instance('core'),
      new H5peditorDrupalStorage()
    );
  }

  return $instance;
}

/**
 * TODO: Rather use core functions than this?
 */
function h5peditor_get_library_property($library, $property = 'all') {
  $matches = array();
  preg_match_all('/(.+)\s(\d+)\.(\d+)$/', $library, $matches);
  if (count($matches) == 4) {
    $library_data = array(
      'machineName' => $matches[1][0],
      'majorVersion' => $matches[2][0],
      'minorVersion' => $matches[3][0],
    );
    switch ($property) {
      case 'all':
        return $library_data;
      case 'libraryId':
        $temp = db_query(
          "SELECT library_id
          FROM {h5p_libraries}
          WHERE machine_name = :name
          AND major_version = :major_version
          AND minor_version = :minor_version",
          array(':name' => $library_data['machineName'], ':major_version' => $library_data['majorVersion'], ':minor_version' => $library_data['minorVersion']))->fetchField();
        return $temp;
      default:
        return $library_data[$property];
    }
  }
  else {
    return FALSE;
  }
}

/**
 * If a node is translated or copied this function finds the source
 *
 * @param stdClass $node
 *  The node object we're working with
 * @return stdClass $node
 *  The node itself, or its copy or translation source
 */
function h5peditor_get_source_node($node) {
  $node = isset($node->translation_source) ? $node->translation_source : $node;
  if (isset($node->clone_from_original_nid)) {
    $node = node_load($node->clone_from_original_nid);
  }
  return $node;
}

/**
 * Implements hook_field_extra_fields().
 */
function h5peditor_field_extra_fields() {
  $extra['node']['h5p_content'] = array(
    'form' => array(
      'h5p_type' => array(
        'label' => t('H5P Action'),
        'description' => t('Choose whether to upload or create/edit content.'),
        'weight' => 1,
      ),
      'h5p_editor' => array(
        'label' => t('H5P Editor'),
        'description' => t('Create or edit interactive content.'),
        'weight' => 2,
      )
    )
  );

  return $extra;
}
