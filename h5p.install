<?php

/**
 * @file
 *  h5p.install php file
 *  Install and upgrade instructions for the h5p Backdrop module.
 */

/**
 * Implements hook_disable().
 */
function h5p_disable() {
  // Show link to h5p.org form
  backdrop_set_message('H5P has now been disabled. Answer the short survey below and get a chance to win a US$500 Amazon Gift Card.</br><iframe src="http://h5p.org/uninstall-form" width="100%" height="360px" style="border: 0;"></iframe>');

  // Alternative text for drush uninstalls
  backdrop_set_message("Leaving because the H5P plugin isnâ€™t working for you? Please share your feedback so we can improve. <a href=\"https://h5p.org/backdrop-module-disabled\">https://h5p.org/backdrop-module-disabled</a>");
}

/**
 * Implements hook_uninstall().
 */
function h5p_uninstall() {
  $config = config('h5p.settings');
  global $language;

  // Clean out file dirs.
  $h5p_path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . '/' . $config->get('h5p_default_path');

  // Load core
  require_once('library/h5p.classes.php');
  require_once('library/h5p-development.class.php');
  require_once('library/h5p-file-storage.interface.php');
  require_once('library/h5p-default-storage.class.php');
  require_once('h5p.classes.inc');
  require_once('h5p.module');

  $interface = new H5PBackdrop();
  $core = new H5PCore($interface, $h5p_path, base_path(), $language->langcode, ($config->get('h5p_export') ? TRUE : FALSE), H5PDevelopment::MODE_NONE);

  // Notify about uninstall
  $core->fetchLibrariesMetadata();

  // Remove these regardless of their content.
  foreach (array('temp', 'libraries', 'content', 'exports') as $directory) {
    _h5p_recursive_unlink($h5p_path . '/' . $directory);
  }

  // Delete remaining h5p entries in file_managed table
  $h5p_uri = db_or()
    ->condition('uri', '%' . db_like('//h5p/') . '%', 'LIKE')
    ->condition('uri', '%' . db_like('//h5peditor/') . '%', 'LIKE');

  db_delete('file_managed')
    ->condition($h5p_uri)
    ->execute();

  // Only remove development dir if it's empty.
  $dir = $h5p_path . '/development';
  if (is_dir($dir) && count(scandir($dir)) === 2) {
    rmdir($dir);

    // Remove parent if empty.
    if (count(scandir($h5p_path)) === 2) {
      rmdir($h5p_path);
    }
  }

  $config->delete();
}

/**
 * Implements hook_install().

 * @link https://api.drupal.org/api/backdrop/modules%21system%21system.api.php/function/hook_install/7.x
 */
function h5p_install() {
  $path = 'public://hpeditor';
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);

  $h5p_content_node_type = array(
    'type' => 'h5p_content',
    'name' => t('Interactive content'),
    'base' => 'h5p',
    'description' => t('Create interactive H5P content.'),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'is_new' => TRUE,
    'settings' => array(
      'promote_enabled' => FALSE,
    ),
  );

  $h5p_content_node_type = node_type_set_defaults($h5p_content_node_type);
  node_type_save($h5p_content_node_type);

  // Notify of communication channels
  backdrop_set_message(
    t('H5P fetches content types directly from the H5P Hub. In order to do this the H5P plugin will communicate with the Hub once a day to fetch information about new and updated content types. It will send in anonymous data to the Hub about H5P usage. Read more at <a href="https://h5p.org/tracking-the-usage-of-h5p">the plugin communication page at H5P.org</a>.')
  );
  // Dynamically generated variable data was detected on the following lines.
  // /h5p/h5p.install line 1659
  // /h5p/h5p.classes.inc line 606
  // /h5p/h5p.classes.inc line 913
}

/**
 * Recursively remove file or directory.
 *
 * @param string $file
 */
function _h5p_recursive_unlink($file) {
  if (is_dir($file)) {
    // Remove all files in dir.
    $subfiles = array_diff(scandir($file), array('.', '..'));
    foreach ($subfiles as $subfile) {
      _h5p_recursive_unlink($file . '/' . $subfile);
    }
    rmdir($file);
  }
  elseif (file_exists($file)) {

    // Get file from file_managed if it exists
    $file_uri = file_build_uri(substr($file, strpos($file, 'h5p/'), strlen($file)));
    $fid = db_query("SELECT fid FROM {file_managed} WHERE uri = :path",
      array(':path' => $file_uri))->fetchField();
    if ($fid !== false) {

      // If it was found delete file and database record
      $file_object = file_load($fid);
      file_delete($file_object);
    }
    else {

      // Delete locally
      backdrop_unlink($file);
    }
  }
}

/**
 * @todo Please document this function.
 */
function h5p_enable() {
  if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }

  $core = _h5p_get_instance('core');

  // Check requirements
  $core->checkSetupForRequirements();

  // Update content type cache
  $core->updateContentTypeCache();
}

/**
 * Implements hook_schema().
 */
function h5p_schema() {
  $schema['h5p_nodes_libraries'] = array(
    'description' => 'Stores information about what h5p uses what libraries.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for a node(vid by default).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'library_id' => array(
        'description' => 'The identifier of a h5p library this content uses.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'dependency_type' => array(
        'description' => "dynamic, preloaded or editor",
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
        'default' => 'preloaded',
      ),
      'drop_css' => array(
        'description' => '1 if the preloaded css from the dependency is to be excluded.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Determines the order in which the preloaded libraries will be loaded',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 999999,
      ),
    ),
    'primary key' => array('content_id', 'library_id', 'dependency_type'),
    'indexes' => array(
      'weight' => array('weight'),
    ),
  );

  $schema['h5p_libraries'] = array(
    'description' => 'Stores information about what h5p uses what libraries.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of the library.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The library machine name',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human readable name of this library',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'major_version' => array(
        'description' => 'The version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'minor_version' => array(
        'description' => 'The minor version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'patch_version' => array(
        'description' => 'The patch version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'runnable' => array(
        'description' => 'Whether or not this library is executable.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'fullscreen' => array(
        'description' => 'Indicates if this library can be opened in fullscreen.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'embed_types' => array(
        'description' => 'The allowed embed types for this library as a comma separated list',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'preloaded_js' => array(
        'description' => 'The preloaded js for this library as a comma separated list',
        'type' => 'text',
      ),
      'preloaded_css' => array(
        'description' => 'The preloaded css for this library as a comma separated list',
        'type' => 'text',
      ),
      'drop_library_css' => array(// TODO: This really needs to be move to h5p_libraries_libraries.
        'description' => 'List of libraries that should not have CSS included if this library is used. Comma separated list.',
        'type' => 'text',
      ),
      'semantics' => array(
        'description' => 'The semantics definition in json format',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'restricted' => array(
        'description' => 'Restricts the ability to create new content using this library.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tutorial_url' => array(
        'description' => 'URL to a tutorial for this library',
        'type' => 'varchar',
        'length' => 1000,
      ),
      'has_icon' => array(
        'description' => 'Whether or not this library contains an icon.svg',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'add_to' => array(
        'description' => 'Plugin configuration data',
        'type' => 'text',
      ),
      'metadata_settings' => array(
        'description' => 'Metadata settings',
        'type' => 'text',
      ),
    ),
    'primary key' => array('library_id'),
    'indexes' => array(
      'library' => array('machine_name', 'major_version', 'minor_version'),
      'title' => array('title'),
    ),
  );

  $schema['h5p_libraries_hub_cache'] = array(
    'description' => 'Stores information about what h5p uses what libraries.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: The id of the library.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The library machine name',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'major_version' => array(
        'description' => 'The version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'minor_version' => array(
        'description' => 'The minor version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'patch_version' => array(
        'description' => 'The patch version of this library',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'h5p_major_version' => array(
        'description' => 'The major version required of H5P core.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'h5p_minor_version' => array(
        'description' => 'The minor version required of H5P core.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'title' => array(
        'description' => 'The human readable name of this library',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'summary' => array(
        'description' => 'Short description of library.',
        'type' => 'text',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Long description of library.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'icon' => array(
        'description' => 'URL to icon.',
        'type' => 'varchar',
        'length' => 511,
        'not null' => TRUE,
        'default' => '',
      ),
      'created_at' => array(
        'description' => 'Time that the library was uploaded.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated_at' => array(
        'description' => 'Time that the library had its latest update.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'is_recommended' => array(
        'description' => 'Whether the library is recommended by the HUB moderators.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'popularity' => array(
        'description' => 'How many times the library has been downloaded.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'screenshots' => array(
        'description' => 'Screenshot URLs json encoded',
        'type' => 'text',
        'size' => 'medium',
      ),
      'license' => array(
        'description' => 'Library license(s) json encoded',
        'type' => 'text',
        'size' => 'medium',
      ),
      'example' => array(
        'description' => 'URL to example content for this library.',
        'type' => 'varchar',
        'length' => 511,
        'not null' => TRUE,
        'default' => '',
      ),
      'tutorial' => array(
        'description' => 'Tutorial URL',
        'type' => 'varchar',
        'length' => 511,
      ),
      'keywords' => array(
        'description' => 'Keywords for library json encoded',
        'type' => 'text',
        'size' => 'medium',
      ),
      'categories' => array(
        'description' => 'Categories for library json encoded',
        'type' => 'text',
        'size' => 'medium',
      ),
      'owner' => array(
        'description' => 'Owner of the library',
        'type' => 'varchar',
        'length' => 511,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'machine_name' => array('machine_name'),
    ),
  );

  $schema['h5p_libraries_libraries'] = array(
    'description' => 'Stores information about library dependencies.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'required_library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'dependency_type' => array(
        'description' => 'preloaded, dynamic, or editor',
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('library_id', 'required_library_id'),
  );

  $schema['h5p_libraries_languages'] = array(
    'description' => 'Stores translations for the languages.',
    'fields' => array(
      'library_id' => array(
        'description' => 'Primary Key: The id of a h5p library.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language_code' => array(
        'description' => 'Primary Key: The language code.',
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
      ),
      'language_json' => array(
        'description' => 'The translations defined in json format',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('library_id', 'language_code'),
  );

  $schema['h5p_nodes'] = array(
    'description' => 'Stores information about where the h5p content is stored.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for this node(vid by default).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The {node}.nid of the h5p node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'json_content' => array(
        'description' => 'The content in json format',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'embed_type' => array(
        'description' => 'The embed type for this content',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'disable' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'main_library_id' => array(
        'description' => 'The library we first instanciate for this node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'content_type' => array(
        'description' => 'Content type as defined in h5p.json',
        'type' => 'varchar',
        'length' => 127,
      ),
      'authors' => array(
        'description' => 'List of authors in json format',
        'type' => 'text',
      ),
      'source' => array(
        'description' => 'Link to the source, could also be citation',
        'type' => 'varchar',
        'length' => 255,
      ),
      'year_from' => array(
        'description' => 'Start year for copyright',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'year_to' => array(
        'description' => 'End year for copyright',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'license' => array(
        'description' => 'License name of the content',
        'type' => 'varchar',
        'length' => 32,
      ),
      'license_version' => array(
        'description' => 'Version of license used for the content',
        'type' => 'varchar',
        'length' => 10,
      ),
      'changes' => array(
        'description' => 'List of changes in json format',
        'type' => 'text',
      ),
      'license_extras' => array(
        'description' => 'Extra licensing terms',
        'type' => 'text',
      ),
      'author_comments' => array(
        'description' => 'Comments for the editor',
        'type' => 'text',
      ),
      'filtered' => array(
        'description' => 'Filtered version of json_content',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'slug' => array(
        'description' => 'Human readable content identifier that is unique',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'default_language' => array(
        'description' => 'Default language for common fields',
        'type' => 'varchar',
        'length' => 32,
      ),
      'shared' => array(
        'description' => 'Shared status for the content hub',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'synced' => array(
        'description' => 'Sync status with the content hub',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
      ),
      'content_hub_id' => array(
        'description' => 'Id of the content on the content hub used for sync',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
      ),
      'a11y_title' => array(
        'description' => 'Title for assistive technologies',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE
      ),
    ),
    'primary key' => array('content_id'),
    'indexes' => array(
      'nid' => array('nid'),
      'library' => array('main_library_id'),
      'slug' => array('slug'),
    ),
  );

  $schema['h5p_points'] = array(
    'description' => 'Stores user statistics.',
    'fields' => array(
      'content_id' => array(
        'description' => 'Primary Key: The unique identifier for this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Primary Key: The id for the user answering this H5P.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'started' => array(
        'description' => 'When the user started on the interaction',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'finished' => array(
        'description' => 'When the user submitted the result',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'The users score',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'max_points' => array(
        'description' => 'The maximum score for this test',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('content_id', 'uid'),
  );

  $schema['h5p_content_user_data'] = array(
    'description' => 'Stores user data about the content',
    'fields' => array(
      'user_id' => array(
        'description' => 'The user identifier',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'content_main_id' => array(
        'description' => 'The main identifier for the h5p content',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sub_content_id' => array(
        'description' => 'The sub identifier for the h5p content',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data_id' => array(
        'description' => 'The data type identifier',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'What the time is',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Contains the data saved',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'preloaded' => array(
        'description' => 'Indicates if the is to be preloaded',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'delete_on_content_change' => array(
        'description' => 'Indicates if the data is to be deleted when the content gets updated',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('user_id', 'content_main_id', 'sub_content_id', 'data_id'),
  );

  $schema['h5p_events'] = array(
    'description' => 'Keeps track of what happens in the H5P system',
    'fields' => array(
      'id' => array(
        'description' => 'The unique event identifier',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'user_id' => array(
        'description' => 'User id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created_at' => array(
        'description' => 'Time of the event',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Type of event',
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
      ),
      'sub_type' => array(
        'description' => 'Sub type of event',
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
      ),
      'content_id' => array(
        'description' => 'Content id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'content_title' => array(
        'description' => 'Content title',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'library_name' => array(
        'description' => 'Library name',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'library_version' => array(
        'description' => 'Version of library',
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'created_at' => array('created_at'),
    ),
  );

  $schema['h5p_counters'] = array(
    'description' => 'Global counters for the H5P system',
    'fields' => array(
      'type' => array(
        'description' => 'Type of counter',
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
      ),
      'library_name' => array(
        'description' => 'Library',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'library_version' => array(
        'description' => 'Version of library',
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
      ),
      'num' => array(
        'description' => 'Number value of counter',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('type', 'library_name', 'library_version'),
  );

  $schema['h5p_content_hub_metadata_cache'] = array(
    'description' => 'JSON representation of the content hub metadata cache',
    'fields' => array(
      'language' => array(
        'description' => 'Language of metadata',
        'type' => 'varchar',
        'length' => 31,
      ),
      'json' => array(
        'description' => 'Metadata as JSON',
        'type'        => 'text',
        'size'        => 'big',
      ),
      'last_checked' => array(
        'description' => 'Last time metadata was checked.',
        'type' => 'int',
      ),
    )
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function h5p_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // TODO: Add check for zip library

    // File paths
    // TODO: Merge over _h5p_check_settings from .module?
    $h5p_path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . '/' . config_get('h5p.settings', 'h5p_default_path');
    $temp_path = $h5p_path . '/temp';
    $export_path = $h5p_path . '/exports';
    if (!file_prepare_directory($h5p_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $requirements['h5p_dirs'] = array(
        'value' => t('Missing directory.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The h5p module's package directory %h5p_path is missing.", array('%h5p_path' => $h5p_path)),
      );
    }
    else if (!file_prepare_directory($temp_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $requirements['h5p_dirs'] = array(
        'value' => t('Missing temp directory.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The h5p module's temp directory %temp_path is missing.", array('%temp_path' => $temp_path)),
      );
    }
    else if (!file_prepare_directory($export_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $requirements['h5p_dirs'] = array(
        'value' => t('Missing export directory.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t("The h5p module's export directory %export_path is missing.", array('%export_path' => $export_path)),
      );
    }
    else {
      $requirements['h5p_dirs'] = array(
        'value' => t('Exists (%path).', array('%path' => $h5p_path)),
        'severity' => REQUIREMENT_OK,
      );
    }
    $requirements['h5p_dirs']['title'] = t('h5p module directories');
  }

  return $requirements;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_6100() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_6101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_6102() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_6103() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_6104() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_6105(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7100(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7102() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7103() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7104() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7105() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7106() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7107() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7108() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7109() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7110() { }

/**
 * (re)Save all dependencies for given content.
 * This will given content nodes a relation to all libraries used by it's main library.
 *
 * @param object $content
 */
function h5p_save_content_dependencies($content) {
  require_once backdrop_get_path('module', 'h5p') . '/library/h5p-development.class.php';
  require_once backdrop_get_path('module', 'h5p') . '/library/h5p.classes.php';
  require_once backdrop_get_path('module', 'h5p') . '/h5p.classes.inc';

  $i = _h5p_get_instance('interface');
  $core = _h5p_get_instance('core');

  $library = $i->loadLibrary($content->libraryName, $content->libraryMajorVersion, $content->libraryMinorVersion);

  $dependencies = array();
  $core->findLibraryDependencies($dependencies, $library);

  $dropLibraryCssList = array();
  foreach ($dependencies as $dependency) {
    if (!empty($dependency['library']['dropLibraryCss'])) {
      $dropLibraryCssList = array_merge($dropLibraryCssList, explode(', ', $dependency['library']['dropLibraryCss']));
    }
  }

  foreach ($dependencies as $dependency) {
    $dropCss = in_array($dependency['library']['machineName'], $dropLibraryCssList) ? 1 : 0;
    db_merge('h5p_nodes_libraries')
    ->key(array('content_id' => $content->id, 'library_id' => $dependency['library']['libraryId'], 'dependency_type' => $dependency['type']))
    ->fields(array('drop_css' => $dropCss))
    ->execute();
  }
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7111() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7112() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7113() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7114() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7115() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7116() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7117() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7118() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7119() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7120() { }


// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7121() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function h5p_update_7122() { }

/**
 * Implements hook_update_last_removed().
 */
function h5p_update_last_removed() {
  return 7122;
}

/**
 * Implements hook_update_N().
 */
function h5p_update_1000() {
  $config = config('h5p.settings');
  $config->set('h5p_frame', update_variable_get('h5p_frame', 'TRUE'));
  $config->set('h5p_export', update_variable_get('h5p_export', '1'));
  $config->set('h5p_embed', update_variable_get('h5p_embed', 'H5PDisplayOptionBehaviour::ALWAYS_SHOW'));
  $config->set('h5p_copyright', update_variable_get('h5p_copyright', 'TRUE'));
  $config->set('h5p_icon', update_variable_get('h5p_icon', 'TRUE'));
  $config->set('h5p_revisioning', update_variable_get('h5p_revisioning', '1'));
  $config->set('h5p_whitelist', update_variable_get('h5p_whitelist', 'dynamic value in file /h5p/h5p.install line 1659'));
  $config->set('h5p_library_whitelist_extras', update_variable_get('h5p_library_whitelist_extras', 'dynamic value in file /h5p/h5p.classes.inc line 606'));
  $config->set('h5p_dev_mode', update_variable_get('h5p_dev_mode', '0'));
  $config->set('h5p_library_development', update_variable_get('h5p_library_development', ''));
  $config->set('h5p_save_content_state', update_variable_get('h5p_save_content_state', ''));
  $config->set('h5p_save_content_frequency', update_variable_get('h5p_save_content_frequency', '30'));
  $config->set('h5p_enable_lrs_content_types', update_variable_get('h5p_enable_lrs_content_types', ''));
  $config->set('h5p_hub_is_enabled', update_variable_get('h5p_hub_is_enabled', 'TRUE'));
  $config->set('h5p_send_usage_statistics', update_variable_get('h5p_send_usage_statistics', 'TRUE'));
  $config->set('h5p_content_type_cache_updated_at', update_variable_get('h5p_content_type_cache_updated_at', 'false'));
  $config->set('h5p_default_path', update_variable_get('h5p_default_path', 'h5p'));
  $config->set('h5p_first_runnable_saved', update_variable_get('h5p_first_runnable_saved', ''));
  $config->set('h5p_library_config', update_variable_get('h5p_library_config', 'NULL'));
  $config->set('hp_name', update_variable_get('hp_name', 'dynamic variable in file /h5p/h5p.classes.inc line 913'));
  $config->set('h5p_icon_in_action_bar', update_variable_get('h5p_icon_in_action_bar', 'TRUE'));
  $config->set('h5p_allow_communication_with_h5p_org', update_variable_get('h5p_allow_communication_with_h5p_org', 'TRUE'));
  $config->set('h5p_fetched_library_metadata_on', update_variable_get('h5p_fetched_library_metadata_on', ''));
  $config->set('h5p_crossorigin', update_variable_get('h5p_crossorigin', 'NULL'));
  $config->set('h5p_crossorigin_cache_buster', update_variable_get('h5p_crossorigin_cache_buster', 'NULL'));
  update_variable_del('h5p_frame');
  update_variable_del('h5p_export');
  update_variable_del('h5p_embed');
  update_variable_del('h5p_copyright');
  update_variable_del('h5p_icon');
  update_variable_del('h5p_revisioning');
  update_variable_del('h5p_whitelist');
  update_variable_del('h5p_library_whitelist_extras');
  update_variable_del('h5p_dev_mode');
  update_variable_del('h5p_library_development');
  update_variable_del('h5p_save_content_state');
  update_variable_del('h5p_save_content_frequency');
  update_variable_del('h5p_enable_lrs_content_types');
  update_variable_del('h5p_hub_is_enabled');
  update_variable_del('h5p_send_usage_statistics');
  update_variable_del('h5p_content_type_cache_updated_at');
  update_variable_del('h5p_default_path');
  update_variable_del('h5p_first_runnable_saved');
  update_variable_del('h5p_library_config');
  update_variable_del('hp_name');
  update_variable_del('h5p_icon_in_action_bar');
  update_variable_del('h5p_allow_communication_with_h5p_org');
  update_variable_del('h5p_fetched_library_metadata_on');
  update_variable_del('h5p_crossorigin');
  update_variable_del('h5p_crossorigin_cache_buster');
}

/**
 * Add content hub metadata cache
 */
function h5p_update_7123() {
  if (!db_table_exists('h5p_content_hub_metadata_cache')) {
    db_create_table('h5p_content_hub_metadata_cache', array(
      'description' => 'JSON representation of the content hub metadata cache',
      'fields'      => array(
        'language' => array(
          'description' => 'Language of metadata',
          'type'        => 'varchar',
          'length'      => 31,
        ),
        'json' => array(
          'description' => 'Metadata as JSON',
          'type'        => 'text',
          'size'        => 'big',
        ),
        'last_checked' => array(
          'description' => 'Last time metadata was checked.',
          'type' => 'int',
        ),
      ),
    ));
  }

  if (!db_field_exists('h5p_nodes', 'shared')) {
    db_add_field('h5p_nodes', 'shared', array(
      'description' => 'Shared status for the content hub',
      'type'        => 'int',
      'size'        => 'tiny',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ));
  }

  if (!db_field_exists('h5p_nodes', 'synced')) {
    db_add_field('h5p_nodes', 'synced', array(
      'description' => 'Sync status with the content hub',
      'type'        => 'int',
      'size'        => 'tiny',
      'unsigned'    => true,
    ));
  }

  if (!db_field_exists('h5p_nodes', 'content_hub_id')) {
    db_add_field('h5p_nodes', 'content_hub_id', array(
      'description' => 'Id of the content on the content hub used for sync',
      'type'        => 'int',
      'size'        => 'big',
      'unsigned'    => true,
    ));
  }

  if (!db_field_exists('h5p_nodes', 'a11y_title')) {
    db_add_field('h5p_nodes', 'a11y_title', array(
      'description' => 'Title for assistive technologies',
      'type' => 'varchar',
      'length' => 255,
      'not null' => false,
    ));
  }
}
